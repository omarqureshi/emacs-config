require 'test_helper'

class UserTest < ActiveSupport::TestCase

  subject { FactoryGirl.create :user }

  should validate_presence_of :email
  should validate_presence_of :password_digest
  should validate_uniqueness_of(:email).case_insensitive
  should_not validate_presence_of :forgotten_password_token
  should_not validate_presence_of :activation_token

  context "when building a user" do
    setup do
      @user = FactoryGirl.build(:user)
    end

    context "when not providing a password" do
      setup { @user.password = nil }
      should 'not be valid' do
        deny @user.valid?
      end
    end

    context "when not providing the same password confirmation" do
      setup { @user.password = "foo"; @user.password_confirmation = "bar"}
      should 'not be valid' do
        deny @user.valid?
      end
    end

    context "when the user has already been created" do
      setup { @user.save }

      should 'set the activation token' do
        assert @user.activation_token
      end

      should 'be able to activate if given a valid activation token' do
        token = @user.activation_token
        @user.activate!(token)
        assert @user.activated_at
      end

      should 'not be able to activate if not given a valid activation token' do
        @user.activate!(nil)
        deny @user.activated_at
      end

      should 'allow you to have nil password and confirmation' do
        @user.password = nil
        @user.password_confirmation = nil
        assert @user.valid?
      end

      context 'when the user has forgotten their password' do
        setup do
          @user.forgotten_password!
        end
        should 'set forgotten password token' do
          assert @user.forgotten_password_token
        end

        should 'be able to reset password when given a valid token' do
          token = @user.forgotten_password_token
          assert @user.password_resettable?(token)
        end

        should 'not be able to reset password when given an invalid token' do
          deny @user.password_resettable?(nil)
        end
      end
    end

  end

end
