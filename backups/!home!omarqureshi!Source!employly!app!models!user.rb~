class User < ActiveRecord::Base
  auto_validate
  has_secure_password

  scope :active, where("activated_at is not null")
  scope :inactive, where("activated_at is null")

  after_create :prepare_user_for_activation

  # Public: sets the activated_at timestamp to the current time if the
  # user is inactive and the token passed is the activation token and
  # saves the user
  #
  # token - Should be a string which comes from a users email and
  #         should be equivalent to the users activation token.

  def activate!(token)
    self.activated_at = Time.now if !active? && token == activation_token
    self.save!
  end

  # Public: Convenience straight true / false check to see whether a
  # user is active or not

  def active?
    !!activated_at
  end

  # Public: Sets the forgotten password token to a user using a random
  # base64 string which is safe to send as a link and sends an email
  # using that token.

  def forgotten_password!
    self.forgotten_password_token = SecureRandom.urlsafe_base64
    self.save!
    deliver_forgotten_password_email
  end

  # Public: Checks to see whether a user can change their password.
  #
  # token - Should be a string which comes from a users email and
  #         should be equivalent to the users password token.

  def password_resettable?(token)
    forgotten_password_token == token
  end

  private

  # Internal: upon creation, sets up an activation token and sends an
  # email using that token

  def prepare_user_for_activation
    set_activation_token
    deliver_activation_email
  end

  # Internal: sets the activation token using a random base64 string
  # which is safe for using as a link.

  def set_activation_token
    self.activation_token = SecureRandom.urlsafe_base64
    self.save!
  end

  # Internal: delivers an activation email

  def deliver_activation_email
    UserMailer.activation_email(self).deliver
  end

  # Internal: delivers a forgotten password email

  def deliver_forgotten_password_email
    UserMailer.activation_email(self).deliver
  end

end
